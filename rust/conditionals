// Replace all four FIXMEs below with the correct type:

fn want_apples() -> bool {
    true
}

fn want_five() -> bool {
    false
}

fn talk_about_fruit() -> bool {
    true
}

fn talk_about_numbers() -> bool {
    false
}

fn main() {
    let fruit: str = if want_apples() {
        "apple"
    } else {
        "banana"
    };

    let number: i32 = if want_five() {
        5
    } else {
        6
    };

    let _x: FIXME = if talk_about_fruit() {
        println!("The fruit is {}", fruit);
    };

    let _y: FIXME = if talk_about_numbers() {
        println!("The number is {}", number);
    };
}

// answer

fn want_apples() -> bool {
    true
}

fn want_five() -> bool {
    false
}

fn talk_about_fruit() -> bool {
    true
}

fn talk_about_numbers() -> bool {
    false
}

fn main() {
    let fruit: &str = if want_apples() {
        "apple"
    } else {
        "banana"
    };

    let number: i32 = if want_five() {
        5
    } else {
        6
    };

    let _x: () = if talk_about_fruit() {
        println!("The fruit is {}", fruit);
    };

    let _y: () = if talk_about_numbers() {
        println!("The number is {}", number);
    };
}

// Rewrite the program below so it doesn’t use any lets. Reminder: you can put any expression inside a macro call’s parameter list.

fn comment(apples: i32) {
    let message = if apples > 10 {
        "lots of"
    } else {
        "very few"
    };

    println!("You have {} apples", message);
}

fn main() {
    comment(5);
    comment(100);
}

// answer 

fn comment(apples: i32) {

    println!("You have {} apples", if apples > 10 {
        "lots of"
    } else {
        "very few"
    });
}

fn main() {
    comment(5);
    comment(100);
}

// 4.

// Flesh out the function, is_hot, which always returns the opposite of is_cold

fn is_hot() -> bool {
    true // your code goes here!
}
fn is_cold() -> bool {
    true // feel free to change this to false
}

// answer
// I originally had a semi colon, but that prevents the line from returning

fn is_hot() -> bool {
    // !is_cold(); -> wrong
    !is_cold()
}
fn is_cold() -> bool {
    true // feel free to change this to false
}